name: 'Terraform'

on:
  push:
    branches: [ "main" ]

env:
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

permissions:
  contents: read

jobs:

  python37:
    name: "Python Layer"
    runs-on: ubuntu-latest
    container: public.ecr.aws/sam/build-python3.7
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build Python 3.7 package
        run: |
          pip install -r requirements.txt -t python/lib/python3.8/site-packages/
          zip -r python37.zip python > /dev/null

      - uses: actions/upload-artifact@master
        with:
          name: python37
          path: ./python37.zip

  terraform:
    name: 'Terraform'
    needs: [python37]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    - uses: actions/checkout@master
    - uses: actions/download-artifact@master
      with:
        name: python37
        path: /artifacts

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false